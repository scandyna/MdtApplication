
default:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest


stages:
  - build
  - test
  - deploy


.build_linux:
  stage: build
  before_script:
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    - conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - mkdir build
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o build_tests=True -o MdtApplication:gui=False ..
    - cmake -G"Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWARNING_AS_ERROR=ON
                               -DCMAKE_C_COMPILER=$C_COMPILER -DCMAKE_CXX_COMPILER=$CXX_COMPILER $CMAKE_EXTRA_CACHE_ENTRIES
                               -DBUILD_SHARED_LIBS=ON -DBUILD_USE_IPO_LTO=ON
                               -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
                               -DENABLE_CORE_APPLICATION_FOR_NON_QT_USAGE=ON
                               -DENABLE_GUI_APPLICATION_FOR_NON_QT_USAGE=OFF
                               ..
    - make -j4
  artifacts:
    expire_in: 1 day
    paths:
      - build


.test_linux:
  stage: test
  script:
    - cd build
    - ctest --output-on-failure .


build_linux_gcc7_x86_64_debug:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    C_COMPILER: gcc-7
    CXX_COMPILER: g++-7
    BUILD_TYPE: Debug
  extends: .build_linux

test_linux_gcc7_x86_64_debug:
  dependencies:
    - build_linux_gcc7_x86_64_debug
  extends: .test_linux


build_linux_gcc7_x86_64_release:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    C_COMPILER: gcc-7
    CXX_COMPILER: g++-7
    BUILD_TYPE: Release
  extends: .build_linux

test_linux_gcc7_x86_64_release:
  dependencies:
    - build_linux_gcc7_x86_64_release
  extends: .test_linux


build_linux_gcc8_x86_64_debug:
  variables:
    CONAN_PROFILE: linux_gcc8_x86_64
    C_COMPILER: gcc-8
    CXX_COMPILER: g++-8
    BUILD_TYPE: Debug
  extends: .build_linux

test_linux_gcc8_x86_64_debug:
  dependencies:
    - build_linux_gcc8_x86_64_debug
  extends: .test_linux


build_linux_gcc8_x86_64_release:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    C_COMPILER: gcc-8
    CXX_COMPILER: g++-8
    BUILD_TYPE: Release
  extends: .build_linux

test_linux_gcc8_x86_64_release:
  dependencies:
    - build_linux_gcc8_x86_64_release
  extends: .test_linux


build_linux_clang6.0_x86_64_libc++_debug:
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++
    C_COMPILER: clang-6.0
    CXX_COMPILER: clang++-6.0
    BUILD_TYPE: Debug
    CMAKE_EXTRA_CACHE_ENTRIES: -DCMAKE_C_FLAGS_INIT=-stdlib=libc++ -DCMAKE_CXX_FLAGS_INIT=-stdlib=libc++
  extends: .build_linux

test_linux_clang6.0_x86_64_libc++_debug:
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_debug
  extends: .test_linux


build_linux_clang6.0_x86_64_libc++_release:
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++
    C_COMPILER: clang-6.0
    CXX_COMPILER: clang++-6.0
    BUILD_TYPE: Release
    CMAKE_EXTRA_CACHE_ENTRIES: -DCMAKE_C_FLAGS_INIT=-stdlib=libc++ -DCMAKE_CXX_FLAGS_INIT=-stdlib=libc++
  extends: .build_linux

test_linux_clang6.0_x86_64_libc++_release:
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_release
  extends: .test_linux


# conan install will get the recipe for a given package on the first remote it finds
# if binaries for this recipe, with settings and options, does not exist in this remote,
# conan will fail (it will not try other remotes)
.build_linux_conan_qt_core:
  stage: build
  before_script:
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    - conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - mkdir build
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o use_conan_qt=True -o build_tests=True -o MdtApplication:gui=False ..
    - cmake -G"Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE=conan_paths.cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWARNING_AS_ERROR=ON
                               -DCMAKE_C_COMPILER=$C_COMPILER -DCMAKE_CXX_COMPILER=$CXX_COMPILER $CMAKE_EXTRA_CACHE_ENTRIES
                               -DBUILD_SHARED_LIBS=ON -DBUILD_USE_IPO_LTO=ON
                               -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
                               -DENABLE_CORE_APPLICATION_FOR_NON_QT_USAGE=ON
                               -DENABLE_GUI_APPLICATION_FOR_NON_QT_USAGE=OFF
                               ..
    - make -j4
  artifacts:
    expire_in: 1 day
    paths:
      - build

# Here we have to get the binaries got with conan during build
.test_linux_conan_qt_core:
  stage: test
  before_script:
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    - conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o build_tests=True ..
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o use_conan_qt=True -o build_tests=True -o MdtApplication:gui=False -r scandyna ..
    - ctest --output-on-failure .


build_linux_clang6.0_x86_64_libc++_tsan:
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++_tsan_qt_core
    C_COMPILER: clang-6.0
    CXX_COMPILER: clang++-6.0
    BUILD_TYPE: RelWithDebInfo
    CMAKE_EXTRA_CACHE_ENTRIES: -DCMAKE_C_FLAGS_INIT=-stdlib=libc++ -DCMAKE_CXX_FLAGS_INIT=-stdlib=libc++ -DSANITIZER_ENABLE_THREAD=ON
  extends: .build_linux_conan_qt_core

test_linux_clang6.0_x86_64_libc++_tsan:
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_tsan
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++_tsan_qt_core
    BUILD_TYPE: RelWithDebInfo
  extends: .test_linux_conan_qt_core
