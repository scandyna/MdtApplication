###############################
# Runners + global parts
###############################

# GitLab shared new Windows runners
# They currently not support Docker engine
#.windows_runner:
  #tags:
    #- shared-windows
    #- windows
    #- windows-1809

.windows_runner:
  tags:
    - docker-windows


stages:
  - build
  - test
  - deploy


###############################
# Reusable templates
###############################

.deploy_conan:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    - conan user --password ${CI_JOB_TOKEN} --remote scandyna ci_user
    - conan create . scandyna/testing --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o MdtApplication:shared=$BUILD_SHARED_LIBS $CONAN_EXTRA_ARGUMENTS
    - conan upload MdtApplication/* --remote scandyna --all -c
    #- conan upload _Project_name_/* --remote scandyna --all -c
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first


###############################
# Linux
###############################

.build_linux:
  stage: build
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - mkdir build
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o shared=$BUILD_SHARED_LIBS -o MdtApplication:gui=True ..
    - source activate.sh
    - cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWARNING_AS_ERROR=ON
                               -DBUILD_SHARED_LIBS=$BUILD_SHARED_LIBS -DBUILD_USE_IPO_LTO=OFF
                               -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DBUILD_BENCHMARKS=ON
                               -DENABLE_CORE_APPLICATION_FOR_NON_QT_USAGE=ON
                               -DENABLE_GUI_APPLICATION_FOR_NON_QT_USAGE=ON
                               ..
    - make -j4
    - source deactivate.sh
  artifacts:
    expire_in: 1 day
    paths:
      - build


.test_linux:
  stage: test
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  script:
    - cd build
    - ctest . --output-on-failure --verbose


build_linux_gcc7_x86_64_debug:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_gcc7_x86_64_debug:
  dependencies:
    - build_linux_gcc7_x86_64_debug
  extends: .test_linux


build_linux_gcc7_x86_64_release:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_gcc7_x86_64_release:
  dependencies:
    - build_linux_gcc7_x86_64_release
  extends: .test_linux


build_linux_gcc7_x86_64_static_release:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "False"
  extends: .build_linux

test_linux_gcc7_x86_64_static_release:
  dependencies:
    - build_linux_gcc7_x86_64_static_release
  extends: .test_linux


build_linux_gcc8_x86_64_debug:
  variables:
    CONAN_PROFILE: linux_gcc8_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_gcc8_x86_64_debug:
  dependencies:
    - build_linux_gcc8_x86_64_debug
  extends: .test_linux


build_linux_gcc8_x86_64_release:
  variables:
    CONAN_PROFILE: linux_gcc8_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_gcc8_x86_64_release:
  dependencies:
    - build_linux_gcc8_x86_64_release
  extends: .test_linux


build_linux_clang6.0_x86_64_libc++_debug:
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_clang6.0_x86_64_libc++_debug:
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_debug
  extends: .test_linux


build_linux_clang6.0_x86_64_libc++_release:
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
  extends: .build_linux

test_linux_clang6.0_x86_64_libc++_release:
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_release
  extends: .test_linux


# conan install will get the recipe for a given package on the first remote it finds
# if binaries for this recipe, with settings and options, does not exist in this remote,
# conan will fail (it will not try other remotes)
.build_linux_tsan:
  stage: build
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - mkdir build
    - cd build
    - conan install --profile $CONAN_PROFILE -o use_conan_qt=True -o MdtApplication:gui=True ..
    - source activate.sh
    - cmake -G"Unix Makefiles" -DWARNING_AS_ERROR=ON -DSANITIZER_ENABLE_THREAD=ON
                               -DCMAKE_BUILD_TYPE=Instrumented -DBUILD_TYPE_INSTRUMENTED_OPTIMIZATION_LEVEL=-O1
                               -DBUILD_SHARED_LIBS=ON -DBUILD_USE_IPO_LTO=OFF
                               -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DBUILD_BENCHMARKS=ON
                               -DENABLE_CORE_APPLICATION_FOR_NON_QT_USAGE=ON
                               -DENABLE_GUI_APPLICATION_FOR_NON_QT_USAGE=ON
                               ..
    - make -j4
    - source deactivate.sh
  artifacts:
    expire_in: 1 day
    paths:
      - build


# Here we have to get the binaries got with conan during build
.test_linux_tsan:
  stage: test
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - cd build
    - conan install --profile $CONAN_PROFILE ..
    - conan install --profile $CONAN_PROFILE -o use_conan_qt=True -o MdtApplication:gui=True -r scandyna ..
    - ctest --output-on-failure .


build_linux_clang6.0_x86_64_libc++_tsan:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-qt-5.14.2-widgets-clang6.0-tsan
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++_tsan_qt_widgets_modules
  extends: .build_linux_tsan

test_linux_clang6.0_x86_64_libc++_tsan:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-qt-5.14.2-widgets-clang6.0-tsan
  dependencies:
    - build_linux_clang6.0_x86_64_libc++_tsan
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++_tsan_qt_widgets_modules
  extends: .test_linux_tsan


.deploy_linux_conan:
  extends: .deploy_conan


deploy_linux_gcc7_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
  extends: .deploy_linux_conan

deploy_linux_gcc7_x86_64_release:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
  extends: .deploy_linux_conan

deploy_linux_gcc7_x86_64_relwithdebinfo:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "True"
  extends: .deploy_linux_conan


deploy_linux_gcc7_x86_64_static_debug:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "False"
  extends: .deploy_linux_conan

deploy_linux_gcc7_x86_64_static_release:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "False"
  extends: .deploy_linux_conan

deploy_linux_gcc7_x86_64_static_relwithdebinfo:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-gui:latest
  dependencies:
  variables:
    CONAN_PROFILE: linux_gcc7_x86_64_qt_core
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "False"
  extends: .deploy_linux_conan


deploy_linux_clang6.0_x86_64_libc++_tsan:
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp-qt-5.14.2-widgets-clang6.0-tsan
  variables:
    CONAN_PROFILE: linux_clang6.0_x86_64_libc++_tsan_qt_widgets_modules
    CONAN_EXTRA_ARGUMENTS: -o MdtApplication:use_conan_qt=True
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "True"
  extends: .deploy_linux_conan

#deploy_linux_clang6.0_x86_64_libc++_debug:
  #variables:
    #CONAN_PROFILE: linux_clang6.0_x86_64_libc++_qt_gui_modules
    #CONAN_EXTRA_ARGUMENTS: -o MdtApplication:use_conan_qt=True
    #BUILD_TYPE: Debug
    #BUILD_SHARED_LIBS: "True"
  #extends: .deploy_linux_conan

#deploy_linux_clang6.0_x86_64_libc++_release:
  #variables:
    #CONAN_PROFILE: linux_clang6.0_x86_64_libc++_qt_gui_modules
    #CONAN_EXTRA_ARGUMENTS: -o MdtApplication:use_conan_qt=True
    #BUILD_TYPE: Release
    #BUILD_SHARED_LIBS: "True"
  #extends: .deploy_linux_conan

#deploy_linux_clang6.0_x86_64_libc++_relwithdebinfo:
  #variables:
    #CONAN_PROFILE: linux_clang6.0_x86_64_libc++_qt_gui_modules
    #CONAN_EXTRA_ARGUMENTS: -o MdtApplication:use_conan_qt=True
    #BUILD_TYPE: RelWithDebInfo
    #BUILD_SHARED_LIBS: "True"
  #extends: .deploy_linux_conan


###############################
# Windows
###############################

.build_windows:
  stage: build
  extends:
    - .windows_runner
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - mkdir build
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o shared=$BUILD_SHARED_LIBS -o MdtApplication:gui=True ..
    - ./activate
    - cmake -G"$CMAKE_GENERATOR" $CMAKE_GENERATOR_EXTRA_ARGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DWARNING_AS_ERROR=ON
                                -DCMAKE_PREFIX_PATH="$QT_PREFIX_PATH"
                                -DBUILD_SHARED_LIBS=$BUILD_SHARED_LIBS -DBUILD_USE_IPO_LTO=OFF
                                -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DBUILD_BENCHMARKS=ON
                                -DENABLE_CORE_APPLICATION_FOR_NON_QT_USAGE=ON
                                -DENABLE_GUI_APPLICATION_FOR_NON_QT_USAGE=ON
                                ..
    - cmake --build . --config $BUILD_TYPE -j4
    - ./deactivate
  artifacts:
    expire_in: 1 day
    paths:
      - build

# Here we have to get the binaries got with conan during build
.test_windows:
  stage: test
  extends:
    - .windows_runner
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
    - conan config install --source-folder conan https://gitlab.com/scandyna/conan-config.git
    #- conan remote update scandyna https://api.bintray.com/conan/scandyna/public-conan --insert 0 # Check for package in scandyna first
  script:
    - cd build
    - conan install --profile $CONAN_PROFILE -s build_type=$BUILD_TYPE -o MdtApplication:gui=True ..
    - ctest . --output-on-failure --build-config $BUILD_TYPE --verbose

.deploy_windows_conan:
  extends:
    - .deploy_conan
    - .windows_runner
  before_script:
    - $env:PATH += ";$QT_PREFIX_PATH;$BOOST_PREFIX_PATH"


build_windows_gcc7_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    CMAKE_GENERATOR: "MinGW Makefiles"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .build_windows

test_windows_gcc7_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Debug
  dependencies:
    - build_windows_gcc7_x86_64_debug
  extends: .test_windows


build_windows_gcc7_x86_32_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win32_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    CMAKE_GENERATOR: "MinGW Makefiles"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_32"
  extends: .build_windows

test_windows_gcc7_x86_32_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win32_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86
    BUILD_TYPE: Debug
  dependencies:
    - build_windows_gcc7_x86_32_debug
  extends: .test_windows


build_windows_msvc16_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_msvc2017_64:latest
  variables:
    CONAN_PROFILE: windows_msvc16_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    CMAKE_GENERATOR: "Visual Studio 16 2019"
    CMAKE_GENERATOR_EXTRA_ARGS: -Ax64
    QT_PREFIX_PATH: "C:/Qt/5.14.2/msvc2017_64"
  extends: .build_windows

test_windows_msvc16_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_msvc2017_64:latest
  variables:
    CONAN_PROFILE: windows_msvc16_x86_64
    BUILD_TYPE: Debug
  dependencies:
    - build_windows_msvc16_x86_64_debug
  extends: .test_windows


deploy_windows_gcc7_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_64_release:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_64_relwithdebinfo:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan


deploy_windows_gcc7_x86_64_static_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "False"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_64_static_release:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "False"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_64_static_relwithdebinfo:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86_64
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "False"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_64"
  extends: .deploy_windows_conan


deploy_windows_gcc7_x86_32_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win32_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_32"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_32_release:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win32_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_32"
  extends: .deploy_windows_conan

deploy_windows_gcc7_x86_32_relwithdebinfo:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win32_mingw73:latest
  variables:
    CONAN_PROFILE: windows_gcc7_x86
    BUILD_TYPE: RelWithDebInfo
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/mingw73_32"
  extends: .deploy_windows_conan


deploy_windows_msvc_x86_64_debug:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_msvc2017_64:latest
  variables:
    CONAN_PROFILE: windows_msvc16_x86_64
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/msvc2017_64"
  extends: .deploy_windows_conan

deploy_windows_msvc_x86_64_release:
  image: registry.gitlab.com/scandyna/docker-images/windows-cpp-qt-5.14.2-win64_msvc2017_64:latest
  variables:
    CONAN_PROFILE: windows_msvc16_x86_64
    BUILD_TYPE: Release
    BUILD_SHARED_LIBS: "True"
    QT_PREFIX_PATH: "C:/Qt/5.14.2/msvc2017_64"
  extends: .deploy_windows_conan

###############################
# API doc
###############################

build_api_doc:
  stage: build
  image: registry.gitlab.com/scandyna/docker-images/ubuntu-18.04-cpp:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  before_script:
    # TODO: remove once in docker images
    - conan remote add scandyna https://gitlab.com/api/v4/projects/25668674/packages/conan
  script:
    - mkdir build
    - cd build
    - conan install ..
    - cmake -DBUILD_CPP_API_DOC=ON ..
    - doxygen
  artifacts:
    expire_in: 1 day
    paths:
      - build

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never
  dependencies:
    - build_api_doc
  script:
    - mv build/doc/html public
  artifacts:
    paths:
      - public
