
include:
  - local: 'ci_cd/GitLab/Common.yml'
  - local: 'ci_cd/GitLab/BuildAndTest_Templates.yml'


variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task


# TODO: maybe not build examples and tests ?
sonar-build:
  image: registry.gitlab.com/scandyna/docker-images-ubuntu/ubuntu-18.04-gcc-8:latest
  stage: build
  cache:
    policy: push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - bw-output/
  rules:
    - !reference [.buildAndTest_rules, rules]
  # BUILD_TYPE and BUILD_SHARED_LIBS variables will be required by .cmake_configure
  variables:
    BUILD_TYPE: Debug
    BUILD_SHARED_LIBS: "True"
  before_script:
    - !reference [.setup_conan, script]
  script:
    - mkdir build
    - cd build
    - conan install --profile:build linux_gcc8_x86_64 --profile:host linux_ubuntu-18.04_gcc8_x86_64_qt_widgets_modules -s build_type=$BUILD_TYPE -o shared=$BUILD_SHARED_LIBS ..
    - source conanbuild.sh || true  # Workaround to https://gitlab.com/gitlab-org/ci-cd/pipeline-authoring-stack-rank/-/issues/1
    - !reference [.cmake_configure, script]
    # Run the build inside the build wrapper - Seems to not work if we stay in build subdirectory
    - cd ..
    - build-wrapper-linux-x86-64 --out-dir bw-output cmake --build build/

# This job should use the same image
# than the one used with Sonar build-wrapper
# (At least the compiler should be the same)
sonarcloud-check:
  image: registry.gitlab.com/scandyna/docker-images-ubuntu/ubuntu-18.04-gcc-8:latest
  stage: .post
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - bw-output/
  script:
    - sonar-scanner -X -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.build-wrapper-output=bw-output
